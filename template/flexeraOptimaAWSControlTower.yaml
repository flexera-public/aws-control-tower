AWSTemplateFormatVersion: '2010-09-09'
Description: Flexera Optima Integration with AWS Control Tower
Parameters:
  FlexeraOrgId:
    Type: String
    Description: The Id of your Flexera Organization
    Default: ''
  RefreshToken:
    Type: String
    Description: RefreshToken from the Flexera Platform.
    Default: ''
    NoEcho: True
  S3Bucket:
    Type: String
    Description: The name of the S3 bucket where your Hourly Cost and Usage Report is stored. Leave it empty to allow for auto-create.
    Default: ''
  S3Prefix:
    Type: String
    Description: The name of the S3 bucket prefix where your Hourly Cost and Usage Report is stored. Leave it empty to allow for auto-create.
    Default: ''
  QSS3BucketName:
    Description: Flexera S3 bucket where the Lambda function package resides, do not modify this unless you are required by Flexera team
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Default: 'wellsiau-quickstart'
    Type: String
  QSS3KeyPrefix:
    Description: Flexera S3 bucket prefix where the Lambda function package resides, do not modify this unless you are required by Flexera team
    AllowedPattern: ^[0-9a-zA-Z-/_]*$
    Default: 'flexera_optima/'
    Type: String
Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - optimaOnboarding.zip
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'
  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  OptimaOnboarding:
    Type: AWS::Lambda::Function
    DependsOn: 
    - CopyZips
    Properties:
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}optimaOnboarding.zip'
      Handler: optimaOnboarding.lambda_handler
      MemorySize: 128
      Role: !GetAtt "OptimaOnboardingRole.Arn"
      Runtime: ruby2.7
      Timeout: 120

  OptimaOnboardingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: OptimaOnboardingOperations
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: S3Operations
                Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:PutBucketPolicy
                Resource: 'arn:aws:s3:::flexera-optima-*'
              - Sid: CUROperations
                Effect: Allow
                Action:
                  - cur:PutReportDefinition                
                Resource: !Join [':', ['arn:aws:cur', !Ref "AWS::Region", !Ref "AWS::AccountId", 'definition/FlexeraOptimaCostReport*']]                
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  OptimaFirstLaunch:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - OptimaOnboarding
        - Arn
      S3Bucket: !Ref S3Bucket
      S3Prefix: !Ref S3Prefix
    DependsOn:
    - OptimaOnboarding

  OptimaConnectRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::451234325714:role/production_customer_access'
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref FlexeraOrgId
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetBucketLocation'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !GetAtt OptimaFirstLaunch.bucket_name
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !GetAtt OptimaFirstLaunch.bucket_name
                      - /*
              - Effect: Allow
                Action:
                  - 'organizations:Describe*'
                  - 'organizations:List*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ce:GetReservationUtilization'
                Resource: '*'
          PolicyName: FlexeraOptimaAccessPolicy
      RoleName: FlexeraOptimaAccessRole
      Description: >-
        Role that provides access for Flexera to Cost Explorer and HCUR S3
        Bucket.
        
  OptimaBillConnect:
    Type: AWS::Lambda::Function
    DependsOn: 
    - CopyZips
    Properties:
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}optimaOnboarding.zip'
      Handler: optimaOnboarding.billconnect_handler
      MemorySize: 128
      Role: !GetAtt "OptimaOnboardingRole.Arn"
      Runtime: ruby2.7
      Timeout: 120

  OptimaFirstConnect:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - OptimaBillConnect
        - Arn
      RefreshToken: !Ref RefreshToken
      AccountId: !Ref "AWS::AccountId"
      S3Bucket: !GetAtt OptimaFirstLaunch.bucket_name
      S3Prefix: !GetAtt OptimaFirstLaunch.prefix
      RoleARN: !GetAtt OptimaConnectRole.Arn
      FlexeraOrgId: !Ref FlexeraOrgId
    DependsOn:
    - OptimaBillConnect
    - OptimaConnectRole
    
Outputs:
  CURBucketName:
    Description: The S3 bucket name for Cost and Usage report
    Value: !GetAtt OptimaFirstLaunch.bucket_name
  CURReportName:
    Description: The Cost and Usage Report name 
    Value: !GetAtt OptimaFirstLaunch.report_name
  OptimaConnectRole:
    Description: IAM Role for Optima Connect
    Value: !GetAtt OptimaConnectRole.Arn